#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> [<filename-base>]" cr
  ."Creates a new money giver in specified workchain, with address saved to <filename-base>.addr" cr
  ."('new-testgiver.addr' by default)" cr 1 halt
} : usage
$# 1- -2 and ' usage if

$1 parse-workchain-id =: wc    // set workchain id from command line argument
def? $2 { @' $2 } { "../bin/new-testgiver" } cond constant file-base

."Creating new money giver in workchain " wc . cr
0 constant init_seqno

// Create new simple money giver
<{ SETCP0 DUP IFNOTRET // return if recv_internal
   DUP 85143 INT EQUAL IFJMP:<{    // "seqno" get-method
     DROP c4 PUSHCTR CTOS 32 PLDU  // cnt
   }>

   INC 32 THROWIF    // fail unless recv_external
   32 LDU SWAP                  // cs cnt
   c4 PUSHCTR CTOS 32 LDU ENDS  // cs cnt cnt'
   TUCK EQUAL 33 THROWIFNOT     // ( seqno mismatch? )
   ACCEPT                       // cs cnt'
   SWAP DUP SREFS          // cnt' cs msg?
   IF:<{
     8 LDU LDREF -ROT             // cnt'' cs mode msg
     GR$20 INT 3 INT RAWRESERVE   // reserve all but 20 Grams from the balance
     SWAP SENDRAWMSG
   }>
   ENDS INC NEWC 32 STU ENDC c4 POPCTR      // store cnt''
}>c
cr .">>> 1.1 Видим ячейку с кодом нащей программы на стеке:" .s
.">>> 1.2 Содеожимое ячейки: " dup <s csr. cr

<b init_seqno 32 u, b> // data
null // no libraries
.">>> 2. докинули на стек пустой сейт и null:" cr .s cr

<b b{0011} s, 3 roll ref, rot ref, swap dict, b> 
.">>>  3. теперь видимо запаковали все что было на стеке, в dict и его-же видмим на стеке: " .s
dup ."StateInit (Копируем и выводим на печать что внутри): " <s csr. cr


.">>>>>> Сейчас на стеке:" .s cr
dup hashu wc swap
.">>>>>> Отаботала МАГИЯ ПОЛУЧЕНИЯ АДРЕСА: dup hashu wc swap:" cr .s
2dup 2constant wallet_addr
."^^^ Удваиваем два последних два значения на стек (0 и ... ):" cr 

.">>> Скопировали значение со стека 'обработали и закинули в константу wallet_addr':" cr
.">>> 4. На стеке два значения которые можно преоразовать в адрес:" cr .s cr 
."new money giver address = " 2dup .addr cr
.">>> Пишем адрес в файлик что бы не потерять."
2dup file-base +".addr" save-address-verbose

cr ."На стеке:" .s
2dup
cr .s ."^^^ Удвоили через 2dup:" cr cr

."Non-bounceable address (for init): " 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
."^^^ Сняли со стека и получили адреса:" cr cr


<b b{1000100} s, wallet_addr addr, b{000010} s, swap <s s, b{0} s, init_seqno 32 u, b>
.">>> Собрали из полученных констант итоговое сообщение и положили его на стек:" .s cr
."External message for initialization is: " dup  <s csr.
."^^^ Откопировали и распечатали в коносль через <s csr." cr cr

.">>> на стеке:" .s
.">>> а теперь распечатаем, что внутри:" cr
dup ."--" <s csr. cr

.">>> Далее запишем это в 'boc' файл добавля CRC" cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved money giver creating query to file " type .")" cr
