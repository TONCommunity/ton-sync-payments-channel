;; Synchronous payment channel implementation: smart contract part

;; Constants that represents statuses of contract during the payment channel operations
;; 0x00000000 - contract deployment state
;; 0x1ee564fc - channel opened. Ready for deposit
;; 0x4e73744b - deposit block. Each user can write a state
;; 0x47657424 - first participant has written the state
;; 0x47657425 - second participant has written the state
;; 0x47657426 - channel closed. first participant can take the remaining amount back


() store_data(int seqno, int contract_status, int time_to_send, int state_num, cell first_user_state, cell second_user_state) impure {
    set_data(begin_cell()
        .store_uint(seqno + 1, 32)
        .store_uint(contract_status, 32)
        .store_uint(time_to_send, 32)
        .store_uint(state_num, 64)
        .store_ref(first_user_state)
        .store_ref(second_user_state)
        .end_cell());
}

(int, int, int, int, cell, cell) get_contract_state(ds) {
    var (stored_seqno, contract_status, time_to_send, state_num) = (ds~load_uint(32), ds~load_uint(32), ds~load_uint(32), ds~load_uint(64));
    var (first_user_state_ref, second_user_state_ref) = (ds~load_ref(), ds~load_ref());
    ds.end_parse();

    return (stored_seqno, contract_status, time_to_send, state_num, first_user_state_ref, second_user_state_ref);
}

() make_payment(int address, int amount) impure {
    send_raw_message(begin_cell()
        .store_uint(0xc400, 17)
        .store_uint(address, 256)
        .store_grams(amount)
        .store_uint(0, 9 + 64 + 32 + 1)
        .store_uint(0x54455354, 33)
        .end_cell(), 3);
}

(cell, cell, int) prepare_new_states(int first_user_pubkey, int first_user_deposit_amount, int second_user_pubkey, int second_user_deposit_amount) impure {

    var first_user_state = begin_cell()
        .store_uint(first_user_pubkey, 256)
        .store_grams(first_user_deposit_amount)
        .end_cell();

    var second_user_state = begin_cell()
        .store_uint(second_user_pubkey, 256)
        .store_grams(second_user_deposit_amount)
        .end_cell();

    return (first_user_state, second_user_state, now() + 86401);

}

(int) get_state_hash(int contract_address, int amount_one, int amount_two, int state_num) impure {
    var checking_slice = begin_cell()
      .store_uint(contract_address, 256)
      .store_uint(state_num, 64)
      .store_grams(amount_one)
      .store_grams(amount_two)
      .end_cell();

    return slice_hash(checking_slice.begin_parse());
}

() deposit(ds, in_msg, int seqno, int msg_value) impure {
    var signature = in_msg~load_bits(512);

    var (first_user_state, second_user_state) = (ds~load_ref().begin_parse(), ds~load_ref().begin_parse());

    var (first_user_pubkey, first_user_amount) = (first_user_state~load_uint(256), first_user_state~load_grams());

    var (second_user_pubkey, second_user_amount) = (second_user_state~load_uint(256), second_user_state~load_grams());

    first_user_state.end_parse();
    second_user_state.end_parse();

    var msg_hash = slice_hash(in_msg);
    if (check_signature(msg_hash, signature, first_user_pubkey)) {
        first_user_amount += msg_value;
    } elseif (check_signature(msg_hash, signature, second_user_pubkey)) {
        second_user_amount += msg_value;
    } else {
        throw(34);
    }

    var first_state = begin_cell()
        .store_uint(first_user_pubkey, 256)
        .store_grams(first_user_amount);

    var second_state = begin_cell()
        .store_uint(second_user_pubkey, 256)
        .store_grams(second_user_amount);

    accept_message();

    store_data(seqno,
        (first_user_amount != 0) & (second_user_amount != 0) ? 0x4e73744b : 0x1ee564fc,
        0,
        0,
        first_state.end_cell(),
        second_state.end_cell());
}

(cell, cell) get_money_back(in_msg, body_signature, first_user_state, second_user_state) {
    var (first_user_pubkey, second_user_pubkey) = (first_user_state~load_uint(256), second_user_state~load_uint(256));
    var (first_user_deposit_amount, second_user_deposit_amount) = (first_user_state~load_grams(), second_user_state~load_grams());

    var msg_hash = slice_hash(in_msg);
    throw_unless(35, 
        (check_signature(msg_hash, body_signature, first_user_pubkey)) | 
        (check_signature(msg_hash, body_signature, second_user_pubkey))
    );
    
    var user_address_ref = in_msg~load_ref().begin_parse();

    var user_address = user_address_ref~load_uint(256);

    var amount = max(first_user_deposit_amount, second_user_deposit_amount); ;; assumption that smart contract has enough GR for fee

    ;; will fixed in future
    ;; var first_user_balance = get_balance().first() - 100000000; ;; 0.1GR for fee
    ;; if (first_user_balance >= 0) {
    ;;    amount = first_user_balance;
    ;; }

    user_address_ref.end_parse();
    accept_message();

    var new_first_user_state = begin_cell().store_uint(first_user_pubkey, 256).store_grams(0).end_cell();
    var new_second_user_state = begin_cell().store_uint(second_user_pubkey, 256).store_grams(0).end_cell();

    make_payment(user_address, amount);
    return (
        new_first_user_state,
        new_second_user_state
    );
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    var cs = in_msg_cell.begin_parse();

    var ds = get_data().begin_parse();
    var (seqno, contract_status, _) = (ds~load_uint(32), ds~load_uint(32), ds~load_uint(32));

    if (contract_status == 0x1ee564fc) {
        deposit(ds, in_msg, seqno, msg_value);
    }

    ;; todo: if msg_value > n then send msg_value - x back
}

() recv_external(slice in_msg) impure {
   var ds = get_data().begin_parse();
    var (
        stored_seqno,
        contract_status,
        time_to_send, 
        state_num,
        first_user_state_ref,
        second_user_state_ref
    ) = get_contract_state(ds);

    if (contract_status == 0x00000000) {
        var seqno = in_msg~load_uint(32);
        throw_unless(33, seqno == stored_seqno);
        accept_message();
        store_data(stored_seqno, 0x1ee564fc, time_to_send, state_num, first_user_state_ref, second_user_state_ref);
        return ();
    }

    var body_signature = in_msg~load_bits(512);

    var cs = in_msg;
    var seqno = cs~load_uint(32);

    ;; protection from holding the transaction
    throw_unless(33, seqno == stored_seqno);

    var (first_user_state, second_user_state) = (first_user_state_ref.begin_parse(), second_user_state_ref.begin_parse());

    ;; the user wants to get the deposit back when the second user has not yet made the deposit
    if (contract_status == 0x1ee564fc) {
        var (fs, ss) = get_money_back(in_msg, body_signature, first_user_state, second_user_state);
        store_data(stored_seqno, contract_status, time_to_send, state_num, fs, ss);
        return ();
    }

    var (first_user_pubkey, second_user_pubkey) = (first_user_state~load_uint(256), second_user_state~load_uint(256));

    var msg_hash = slice_hash(in_msg);
    if (check_signature(msg_hash, body_signature, first_user_pubkey)) {
        throw_unless(36, (contract_status != 0x47657424) | (now() >= time_to_send));
        ifnot(contract_status == 0x1ee564fc) { contract_status = 0x47657424; } ;; first participant
    } elseif (check_signature(msg_hash, body_signature, second_user_pubkey)) {
        throw_unless(36, (contract_status != 0x47657425) | (now() >= time_to_send));
        ifnot(contract_status == 0x1ee564fc) { contract_status = 0x47657425; } ;; second participant
    } else {
        throw(35);
    }

    var final_state = cs~load_ref().begin_parse();

    var contract_address = final_state~load_uint(256);
    var (my_wc, my_addr) = my_address().parse_std_addr();

    throw_unless(60, my_wc - 1);                   ;; contract should be on basechain
    throw_unless(60, my_addr == contract_address); ;; protect from previous states (last smart contracts)

    var new_state_num = final_state~load_uint(64);
    var (first_user_amount, second_user_amount) = (final_state~load_grams(), final_state~load_grams());
    final_state.end_parse();

    var signatures_ref = cs~load_ref().begin_parse();
    var (first_user_signature_slice, second_user_signature_slice) = (signatures_ref~load_ref().begin_parse(), signatures_ref~load_ref().begin_parse());

    var (first_user_signature, second_user_signature) = (first_user_signature_slice.preload_bits(512), second_user_signature_slice.preload_bits(512));

    var state_hash = get_state_hash(contract_address, first_user_amount, second_user_amount, new_state_num);

    throw_unless(37, check_signature(state_hash, first_user_signature, first_user_pubkey));
    throw_unless(38, check_signature(state_hash, second_user_signature, second_user_pubkey));
     
    var (first_user_deposit_amount, second_user_deposit_amount) = (first_user_state~load_grams(), second_user_state~load_grams());

    ;; total state amount should be equals to total deposit amount
    throw_unless(39, first_user_deposit_amount + second_user_deposit_amount == first_user_amount + second_user_amount);

    ;; state should be >= current state
    throw_unless(40, new_state_num >= state_num);

    if (new_state_num > state_num) {
        var (fus, sus, tts) = prepare_new_states(first_user_pubkey, first_user_deposit_amount, second_user_pubkey, second_user_deposit_amount);
 
        first_user_state_ref = fus;
        second_user_state_ref = sus;
        time_to_send = tts;

        state_num = new_state_num;

        accept_message();
    } else {
        var (first_user_addr_signature, second_user_addr_signature) = (signatures_ref~load_ref().begin_parse(), signatures_ref~load_ref().begin_parse());

        signatures_ref.end_parse();
        
        var (first_user_address_signature, first_user_address, second_user_address_signature, second_user_address) = (
            first_user_addr_signature~load_bits(512), 
            first_user_addr_signature~load_uint(256),
            second_user_addr_signature~load_bits(512),
            second_user_addr_signature~load_uint(256)
        );

        first_user_addr_signature.end_parse();
        second_user_addr_signature.end_parse();

        throw_unless(41, check_data_signature(begin_cell()
            .store_uint(first_user_address, 256)
            .end_cell().begin_parse(), first_user_address_signature, first_user_pubkey));
        
        throw_unless(42, check_data_signature(begin_cell()
            .store_uint(second_user_address, 256)
            .end_cell().begin_parse(), second_user_address_signature, second_user_pubkey));

        accept_message();

        ;; the assumption is that the first user deployed the contract and the participants agreed on commissions
        ;; will fixed in future
        ;; var first_user_balance = get_balance().first() - second_user_amount - 100000000; ;; 0.1GR for fee
        ;; if (first_user_balance >= 0) {
        ;;    first_user_amount = first_user_balance;
        ;; }

        make_payment(first_user_address, first_user_amount);
        make_payment(second_user_address, second_user_amount);
        contract_status = 0x47657426;
    }
    
    store_data(seqno, contract_status, time_to_send, state_num, first_user_state_ref, second_user_state_ref);
}

(int, int) stacked_sums() method_id {
     var ds = get_data().begin_parse();
     var (first_user_state, second_user_state) = (ds~load_ref().begin_parse(), ds~load_ref().begin_parse());
     var first_user_grams = first_user_state.skip_bits(256);
     var second_user_grams = second_user_state.skip_bits(256);
     return (first_user_grams~load_grams(), second_user_grams~load_grams());
}

(int, int) participants() method_id {
     var ds = get_data().begin_parse();
     var (first_user_state, second_user_state) = (ds~load_ref().begin_parse(), ds~load_ref().begin_parse());
     return (first_user_state.preload_uint(256), second_user_state.preload_uint(256));
}

int state_num() method_id {
     var ds = get_data().begin_parse();
     return ds.skip_bits(96).preload_uint(64);
}

int time_to_send() method_id {
     var ds = get_data().begin_parse();
     return ds.skip_bits(64).preload_uint(32);
}

int contract_status() method_id {
     var ds = get_data().begin_parse();
     return ds.skip_bits(32).preload_uint(32);
}

int seqno() method_id {
     var ds = get_data().begin_parse();
     return ds.preload_uint(32);
}